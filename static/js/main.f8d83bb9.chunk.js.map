{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yUAKaA,EAAO,SAACC,GAAD,OAElB,cADA,CACA,OAAKC,UAAU,iBAAf,UAEE,qBACEC,IAAI,UAEJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAGL,6BAAKL,EAAMI,QAAQE,OAEnB,4BAAIN,EAAMI,QAAQG,YCVTC,EAAW,SAACR,GACvB,OAEE,aADA,CACA,OAAKC,UAAU,YAAf,SAEGD,EAAMS,SAASC,KAAI,SAACN,GAAD,OAElB,aADA,CACC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCXdM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EAEbG,SAAUF,MCyCCG,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAgBFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IAJH,E,qDAQd,WAAqB,IAAD,OAElBI,MAAM,8CAEHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAE5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAET,SAAUkB,S,oBAQ/C,WACE,MAAkCC,KAAKN,MAA/Bb,EAAR,EAAQA,SAAUU,EAAlB,EAAkBA,YACZU,EAAmBpB,EAASqB,QAAO,SAAC1B,GAAD,OACvCA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAElD,OAEE,cADA,CACA,OAAK9B,UAAU,MAAf,UACE,kDAGA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GAvCVI,aCOHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBZ,MAAK,YAAkD,IAA/Ca,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f8d83bb9.chunk.js","sourcesContent":["import React from \"react\";\n// imports css styles for card\nimport \"./card.styles.css\";\n\n// functional component to create card (like constructor function) with props passed in\nexport const Card = (props) => (\n  // card div\n  <div className=\"card-container\">\n    {/* places image in the card div */}\n    <img\n      alt=\"monster\"\n      // sources image from API using template literal and pulls the id from props.monster.id as a value in the URI\n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n    />\n    {/* below image the monster name is applied in h2 and is pulled from the monsters property */}\n    <h2>{props.monster.name}</h2>\n    {/* monster (user) email applied as p pulling email from each monster via props */}\n    <p>{props.monster.email}</p>\n  </div>\n);\n","import React from \"react\";\n// imports css styles\nimport \"./card-list.styles.css\";\n// imports the card component\nimport { Card } from \"../card/card.component\";\n\n// functional component CardList with 'props' parameter (like constructor function)\nexport const CardList = (props) => {\n  return (\n    // returns jsx div with className to take on css styles\n    <div className=\"card-list\">\n      {/* maps the monsters prop iterates over each 'monster' in the monsters array, this prop is passed in from App.js */}\n      {props.monsters.map((monster) => (\n        // for each monster in the monster prop we create a Card which is imported and assign a key from monster.id to each card, as well as define the monster prop with each iterated monster\n        <Card key={monster.id} monster={monster} />\n      ))}\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./search-box.styles.css\";\n\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input\n    className=\"search\"\n    type=\"search\"\n    placeholder={placeholder}\n    // onChange event sets state object searchField to the event target value\n    onChange={handleChange}\n  />\n);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { CardList } from \"./components/card-list/card-list.component\";\nimport { SearchBox } from \"./components/search-box/search-box.component\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  // when app mounts (Placed on actual DOM)\n  componentDidMount() {\n    // fetch users data form this api\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n      //jsonify the response data\n      .then((response) => response.json())\n      // set state and assign response user data to the monsters array\n      .then((users) => this.setState({ monsters: users }));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  // app class render method\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      // div contains entire app with app class\n      <div className=\"App\">\n        <h1>Monsters Rolodex</h1>\n\n        {/* Search Box Component */}\n        <SearchBox\n          placeholder=\"search monsters\"\n          handleChange={this.handleChange}\n        />\n        {/* applies CardList component, monsters= assigns the prop \"monsters\" ot the CardList component and its value is the value of the monsters key in the state */}\n        <CardList monsters={filteredMonsters}></CardList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}